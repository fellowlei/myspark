sw
openresty-1.9.7.4.tar.gz
ubuntu16.01


(本文下载的是openresty-1.9.7.4.tar.gz )
wget https://openresty.org/download/openresty-1.9.7.4.tar.gz

安装相关依赖包
$ apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential

安装
$ tar -zxvf openresty-1.9.7.4.tar.gz
$ cd openresty-1.9.7.4
$ ./configure --prefix=/usr/local/openresty\    //安装到/usr/local/openresty
             --with-luajit\               //激活luajit
             --with-http_iconv_module     //激活http_iconv_module
$ make
$ make install






============================================================
nginx+lua项目构建
http://jinnianshilongnian.iteye.com/blog/2186270

nginx+lua项目构建
/app/example
项目目录结构如下所示：
example
    example.conf     ---该项目的nginx 配置文件
    lua              ---我们自己的lua代码
      test.lua

1. /usr/local/openresty/nginx/conf/nginx.conf配置文件如下(此处我们最小化了配置文件)
----nginx.conf
#user  nobody;
worker_processes  1;
error_log  logs/error.log;
pid        logs/nginx.pid;
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";  #lua 模块
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";  #c模块

    include /app/example/example.conf;
}

2. /app/example/example.conf配置文件如下
server {
	listen 80;
	server_name 80;
	location /lua {
		default_type 'text/html';
		lua_code_cache off; #debug only
		content_by_lua_file /app/example/lua/test.lua;
	}
}

3. lua文件/app/example/lua/test.lua
ngx.say("hello world");

4. test
 sbin/nginx  -t
5. reload
 sbin/nginx -s reload


auto route
===========================================
/app/example/example.conf
 lua_shared_dict configs 1m;
 upstream fetchback1 {
    server localhost:8080 weight=1 max_fails=3 fail_timeout=3s;
    keepalive 1024;
  }

  upstream fetchback2 {
      server localhost:8081 weight=1 max_fails=3 fail_timeout=3s;
      keepalive 1024;
   }


server {
	listen 80;
	server_name localhost;
	location /fetch{
		default_type 'text/html';
		lua_code_cache off;
		content_by_lua_file /app/example/lua/fetch.lua;
	}

  	location /fetchback_source1 {
    		proxy_pass http://fetchback1/1.html;
  	}

  	location /fetchback_source2 {
      		proxy_pass http://fetchback2/1.html;
  	}
}

/app/example/lua/fetch.lua
local configs = ngx.shared.configs;
configs:set("fetchback",1);

-- route location
local function getFetchbackUrl()
    --ngx.say('fetchbackurl')
    local flag = configs:get("fetchback");
    if(flag == 1) then
        return "/fetchback_source1"
    else
        return "/fetchback_source2";
    end
end
-- fetchback route
local function captureLocation(args)
	local res = ngx.location.capture("/fetchback_source1",{args=args});
	if res.status ~= ngx.HTTP_OK then
	    ngx.say("route 2")
	    res = ngx.location.capture("/fetchback_source2",{args=args});
	    if res.status ~= ngx.HTTP_OK then
	    	return nil;
	    end
        end
	return res;
end
--local url = getFetchbackUrl()
--local res = ngx.location.capture("/fetchback_source1",{args = 'name=mark'})

-- demo
local res = captureLocation('name=mark');
if res ~= nil then
	ngx.say(res.body)
else
     ngx.say("res is nil")
end
